import { Scene } from 'phaser';

export class TitleScene extends Scene {
  // „Éá„Éê„ÉÉ„Ç∞„É©„Ç§„É≥ÁÆ°ÁêÜ
  private debugElements: Phaser.GameObjects.GameObject[] = [];
  private debugVisible = true; // ÂàùÊúüË°®Á§∫ON

  constructor() {
    super({ key: 'TitleScene' });
  }

  create() {
    const { width, height } = this.scale;

    // üè∑Ô∏è ÁîªÈù¢Âêç„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Ë°®Á§∫
    console.log('üé¨ === TITLE SCENE ===');
    console.log('üìç Current Scene: „Çø„Ç§„Éà„É´ÁîªÈù¢');
    console.log('üéØ Purpose: „Ç≤„Éº„É†ÈñãÂßãÁîªÈù¢');

    // „Éá„Éê„ÉÉ„Ç∞„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„Éº„ÇíË®≠ÂÆö
    this.setupDebugShortcut();

    // ËÉåÊôØËâ≤Ë®≠ÂÆöÔºàÊ∑±„ÅÑÊµ∑„ÅÆ„Ç§„É°„Éº„Ç∏Ôºâ
    this.cameras.main.setBackgroundColor('#0F3460');

    // „Çø„Ç§„Éà„É´„É≠„Ç¥
    this.add.text(width / 2, height / 2 - 100, 'üåä „Åï„ÇÅ„Åå„ÇÅ', {
      fontSize: '32px',
      color: '#7DB9E8',
      fontStyle: 'bold'
    }).setOrigin(0.5);

    this.add.text(width / 2, height / 2 - 60, '„Ç™„Éº„Ç∑„É£„É≥ üåä', {
      fontSize: '32px',
      color: '#7DB9E8',
      fontStyle: 'bold'
    }).setOrigin(0.5);

    // „Ç≤„Éº„É†ÈñãÂßã„Éú„Çø„É≥
    const startButton = this.add.rectangle(width / 2, height / 2 + 50, 200, 60, 0x2E8B57, 0.9);
    startButton.setInteractive();
    startButton.on('pointerdown', () => {
      this.scene.start('MainScene', {
        currentStage: 1,
        gold: 1250 // „É¢„ÉÉ„ÇØ„Éá„Éº„Çø
      });
    });
    
    // „Éú„Çø„É≥„ÅÆ„Éõ„Éê„Éº„Ç®„Éï„Çß„ÇØ„Éà
    startButton.on('pointerover', () => {
      startButton.setAlpha(0.8);
    });
    startButton.on('pointerout', () => {
      startButton.setAlpha(1.0);
    });

    this.add.text(width / 2, height / 2 + 50, '„Ç≤„Éº„É†ÈñãÂßã', {
      fontSize: '18px',
      color: '#FFFFFF',
      fontStyle: 'bold'
    }).setOrigin(0.5);

    // „Éê„Éº„Ç∏„Éß„É≥Ë°®Á§∫
    this.add.text(width / 2, height - 50, 'Ver 1.0.0', {
      fontSize: '14px',
      color: '#CCCCCC'
    }).setOrigin(0.5);

    // ÈñãÁô∫ÊÉÖÂ†±ÔºàÈñãÁô∫ÊôÇ„ÅÆ„ÅøÔºâ
    if (process.env.NODE_ENV === 'development') {
      this.add.text(10, 10, 'Phase 3: UI/ÁîªÈù¢„Ç∑„Çπ„ÉÜ„É†ÂÆüË£Ö‰∏≠', {
        fontSize: '12px',
        color: '#CCCCCC'
      });
    }

    // „Éá„Éê„ÉÉ„Ç∞„É©„Ç§„É≥ËøΩÂä†
    this.addDebugLines(width, height);
  }

  private setupDebugShortcut() {
    // D„Ç≠„Éº„Åß„Éá„Éê„ÉÉ„Ç∞„É©„Ç§„É≥Âàá„ÇäÊõø„Åà
    this.input.keyboard?.on('keydown-D', (event: KeyboardEvent) => {
      if (event.shiftKey) {
        // Shift+D: Ë©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Âá∫Âäõ
        this.logDetailedDebugInfo();
      } else {
        // D: „Éá„Éê„ÉÉ„Ç∞„É©„Ç§„É≥Âàá„ÇäÊõø„Åà
        this.toggleDebugLines();
      }
    });
    
    console.log('üîß [TITLE SCENE] Debug shortcut setup:');
    console.log('  - Press "D" to toggle debug lines');
    console.log('  - Press "Shift+D" to log detailed debug info');
  }

  private toggleDebugLines() {
    this.debugVisible = !this.debugVisible;
    
    // ÂÖ®„Å¶„ÅÆ„Éá„Éê„ÉÉ„Ç∞Ë¶ÅÁ¥†„ÅÆË°®Á§∫/ÈùûË°®Á§∫„ÇíÂàá„ÇäÊõø„Åà
    this.debugElements.forEach(element => {
      element.setVisible(this.debugVisible);
    });
    
    console.log(`üîß [TITLE SCENE] Debug lines ${this.debugVisible ? 'SHOWN' : 'HIDDEN'} (Press D to toggle)`);
  }

  private addDebugLines(width: number, height: number) {
    console.log('üîß [TITLE SCENE] Adding debug rectangles for area visualization...');
    
    // „Éò„ÉÉ„ÉÄ„Éº„Ç®„É™„Ç¢ÔºàY=0-100Ôºâ- Ëµ§Ëâ≤
    const headerRect = this.add.rectangle(width / 2, 50, width - 4, 96, 0x000000, 0)
      .setStrokeStyle(3, 0xFF0000);
    const headerText = this.add.text(10, 5, '„Éò„ÉÉ„ÉÄ„Éº„Ç®„É™„Ç¢ Y=0-100', {
      fontSize: '12px',
      color: '#FF0000',
      backgroundColor: '#000000',
      fontStyle: 'bold'
    });
    this.debugElements.push(headerRect, headerText);
    
    // „Çø„Ç§„Éà„É´„Ç®„É™„Ç¢ÔºàY=100-400Ôºâ- Á∑ëËâ≤
    const titleRect = this.add.rectangle(width / 2, 250, width - 4, 296, 0x000000, 0)
      .setStrokeStyle(3, 0x00FF00);
    const titleText = this.add.text(10, 105, '„Çø„Ç§„Éà„É´„Ç®„É™„Ç¢ Y=100-400', {
      fontSize: '12px',
      color: '#00FF00',
      backgroundColor: '#000000',
      fontStyle: 'bold'
    });
    this.debugElements.push(titleRect, titleText);
    
    // „Éú„Çø„É≥„Ç®„É™„Ç¢ÔºàY=400-600Ôºâ- ÈùíËâ≤
    const buttonRect = this.add.rectangle(width / 2, 500, width - 4, 196, 0x000000, 0)
      .setStrokeStyle(3, 0x0000FF);
    const buttonText = this.add.text(10, 405, '„Éú„Çø„É≥„Ç®„É™„Ç¢ Y=400-600', {
      fontSize: '12px',
      color: '#0000FF',
      backgroundColor: '#000000',
      fontStyle: 'bold'
    });
    this.debugElements.push(buttonRect, buttonText);
    
    // „Éï„ÉÉ„Çø„Éº„Ç®„É™„Ç¢ÔºàY=600-710Ôºâ- Á¥´Ëâ≤
    const footerRect = this.add.rectangle(width / 2, 655, width - 4, 106, 0x000000, 0)
      .setStrokeStyle(3, 0xFF00FF);
    const footerText = this.add.text(10, 605, '„Éï„ÉÉ„Çø„Éº„Ç®„É™„Ç¢ Y=600-710', {
      fontSize: '12px',
      color: '#FF00FF',
      backgroundColor: '#000000',
      fontStyle: 'bold'
    });
    this.debugElements.push(footerRect, footerText);
    
    console.log('üîß [TITLE SCENE] Debug elements count:', this.debugElements.length);
  }

  private logDetailedDebugInfo() {
    const { width, height } = this.scale;
    console.log('üîç === DETAILED DEBUG INFO [TITLE SCENE] ===');
    console.log('üìç Current Screen:', {
      sceneName: 'TitleScene',
      displayName: '„Çø„Ç§„Éà„É´ÁîªÈù¢',
      purpose: '„Ç≤„Éº„É†ÈñãÂßãÁîªÈù¢',
      sceneKey: this.scene.key,
      isActive: this.scene.isActive(),
      isPaused: this.scene.isPaused(),
      isVisible: this.scene.isVisible()
    });
    console.log('üì± Screen Info:', {
      width: width,
      height: height,
      devicePixelRatio: window.devicePixelRatio
    });
    console.log('üé® Debug Elements:', {
      count: this.debugElements.length,
      visible: this.debugVisible,
      types: this.debugElements.map(el => el.type)
    });
    console.log('‚å®Ô∏è Input Info:', {
      hasKeyboard: !!this.input.keyboard,
      activePointers: this.input.activePointer ? 1 : 0
    });
    console.log('üîß Performance:', {
      fps: this.game.loop.actualFps.toFixed(1),
      delta: this.game.loop.delta
    });
    console.log('=== END DEBUG INFO ===');
  }
}
